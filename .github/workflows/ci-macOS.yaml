name: Build ANGLE macOS Universal

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  check-environmet:
    name: Check environment
    runs-on: macos-14
    steps:
      - name: Check Python availability
        run: |
          echo "macOS:"
          sw_vers
          if ! command -v python3 >/dev/null 2>&1; then
            echo "❌ Python3 not found!"
            exit 1
          fi
          echo "Python3 found: $(python3 --version)"
      - name: Check MacOS XCode version
        run: |
          echo "macOS version:"
          sw_vers

  setup-depot_tool:
    name: setup depot_tools
    runs-on: macos-14
    needs: check-environmet
    steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Cache depot_tools
          uses: actions/cache@v3
          with:
            path: "depot_tools"
            key: depot-tools-cache-v1
            restore-keys: depot-tools-

        - name: Setup depot_tools
          run: echo "PATH=$PWD/depot_tools:$PATH" >> $GITHUB_ENV

  build-debug-arm64:
    name: Build Debug arm64
    runs-on: macos-14
    needs: setup-depot_tool

    steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Cache depot_tools
          uses: actions/cache@v3
          with:
            path: "depot_tools"
            key: depot-tools-cache-v1
            restore-keys: depot-tools-

        # Install depot_tools if not available by cache
        - name: Setup depot_tools
          run: echo "PATH=$PWD/depot_tools:$PATH" >> $GITHUB_ENV

        # cache /angle folder if no change in dot.gclient_for_macOS
        - name: Cache ANGLE checkout
          uses: actions/cache@v3
          with:
            path: angle
            key: angle-cache-debug-arm64-${{ hashFiles('dot.gclient_for_macOS') }}
            restore-keys: angle-cache-debug-arm64-
  
        # Rename dot.gclient_for_macOS to .gclient file
        - name: Prepare .gclient file
          run: mv dot.gclient_for_macOS .gclient

        - name: Sync ANGLE repository
          run: gclient sync

        - name: Generate Buid Files Debug arm64
          run: |
            cd angle
            gn --version
            gn gen out/Debug/arm64 --args="is_component_build=false use_custom_libcxx=false angle_build_tests=false build_with_chromium=false angle_enable_d3d9=false angle_enable_d3d11=false angle_enable_gl=false angle_enable_metal=true angle_enable_vulkan=false angle_enable_cl=false angle_enable_wgpu=false angle_enable_swiftshader=false angle_enable_hlsl=false angle_has_rapidjson=false angle_build_vulkan_system_info=false angle_enable_overlay=false use_glib=false angle_enable_trace=false target_cpu=\"arm64\" is_debug=true"

        - name: Build Debug arm64 dylibs
          run: |
            cd angle
            autoninja -C out/Debug/arm64 libEGL libGLESv2

        - name: Upload dylibs
          uses: actions/upload-artifact@v4
          with:
            name: lib-debug-arm64
            path: angle/out/Debug/arm64/lib*.dylib

  build-debug-x64:
    name: Build Debug x64
    runs-on: macos-14
    needs: setup-depot_tool

    steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Cache depot_tools
          uses: actions/cache@v3
          with:
            path: "depot_tools"
            key: depot-tools-cache-v1
            restore-keys: depot-tools-

        - name: Setup depot_tools
          run: echo "PATH=$PWD/depot_tools:$PATH" >> $GITHUB_ENV

        # cache /angle folder if no change in dot.gclient_for_macOS
        - name: Cache ANGLE checkout
          uses: actions/cache@v3
          with:
            path: angle
            key: angle-cache-debug-x64-${{ hashFiles('dot.gclient_for_macOS') }}
            restore-keys: angle-cache-debug-x64-
  
        # Rename dot.gclient_for_macOS to .gclient file
        - name: Prepare .gclient file
          run: mv dot.gclient_for_macOS .gclient

        - name: Sync ANGLE repository
          run: gclient sync

        - name: Generate Buid Files Debug x64
          run: |
            cd angle
            gn --version
            gn gen out/Debug/x64 --args="is_component_build=false use_custom_libcxx=false angle_build_tests=false build_with_chromium=false angle_enable_d3d9=false angle_enable_d3d11=false angle_enable_gl=false angle_enable_metal=true angle_enable_vulkan=false angle_enable_cl=false angle_enable_wgpu=false angle_enable_swiftshader=false angle_enable_hlsl=false angle_has_rapidjson=false angle_build_vulkan_system_info=false angle_enable_overlay=false use_glib=false angle_enable_trace=false target_cpu=\"x64\" is_debug=true"

        - name: Build Debug x64 dylibs
          run: |
            cd angle
            autoninja -C out/Debug/x64 libEGL libGLESv2

        - name: Upload dylibs
          uses: actions/upload-artifact@v4
          with:
            name: lib-debug-x64
            path: angle/out/Debug/x64/lib*.dylib

  merge-debug:
    name: Merge Debug arm64 and x64 dylibs
    runs-on: macos-14
    needs: [build-debug-arm64, build-debug-x64]

    steps:
      - name: Download arm64 dylibs
        uses: actions/download-artifact@v4
        with:
          name: lib-debug-arm64
          path: arm64

      - name: Download x64 dylibs
        uses: actions/download-artifact@v4
        with:
          name: lib-debug-x64
          path: x64

      - name: Merge with lipo
        run: |
          lipo -create \
            arm64/libGLESv2.dylib \
            x64/libGLESv2.dylib \
            -output libGLESv2-debug.dylib

          lipo -create \
            arm64/libEGL.dylib \
            x64/libEGL.dylib \
            -output libEGL-debug.dylib

      - name: Upload merged universal dylibs
        uses: actions/upload-artifact@v4
        with:
          name: lib-debug-universal
          path: |
            libGLESv2-debug.dylib
            libEGL-debug.dylib

  #
  # Release
  #

  build-release-arm64:
    name: Build Release arm64
    runs-on: macos-14
    needs: setup-depot_tool

    steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Cache depot_tools
          uses: actions/cache@v3
          with:
            path: "depot_tools"
            key: depot-tools-cache-v1
            restore-keys: depot-tools-

        - name: Setup depot_tools
          run: echo "PATH=$PWD/depot_tools:$PATH" >> $GITHUB_ENV

        # cache /angle folder if no change in dot.gclient_for_macOS
        - name: Cache ANGLE checkout
          uses: actions/cache@v3
          with:
            path: angle
            key: angle-cache-release-arm64-${{ hashFiles('dot.gclient_for_macOS') }}
            restore-keys: angle-cache-release-arm64-
  
        # Rename dot.gclient_for_macOS to .gclient file
        - name: Prepare .gclient file
          run: mv dot.gclient_for_macOS .gclient

        - name: Sync ANGLE repository
          run: gclient sync

        - name: Generate Buid Files Release arm64
          run: |
            cd angle
            gn --version
            gn gen out/Release/arm64 --args="is_component_build=false use_custom_libcxx=false angle_build_tests=false build_with_chromium=false angle_enable_d3d9=false angle_enable_d3d11=false angle_enable_gl=false angle_enable_metal=true angle_enable_vulkan=false angle_enable_cl=false angle_enable_wgpu=false angle_enable_swiftshader=false angle_enable_hlsl=false angle_has_rapidjson=false angle_build_vulkan_system_info=false angle_enable_overlay=false use_glib=false angle_enable_trace=false target_cpu=\"arm64\" is_debug=false"

        - name: Build Release arm64 dylibs
          run: |
            cd angle
            autoninja -C out/Release/arm64 libEGL libGLESv2

        - name: Upload dylibs
          uses: actions/upload-artifact@v4
          with:
            name: lib-release-arm64
            path: angle/out/Release/arm64/lib*.dylib

  build-release-x64:
    name: Build Release x64
    runs-on: macos-14
    needs: setup-depot_tool

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache depot_tools
        uses: actions/cache@v3
        with:
          path: "depot_tools"
          key: depot-tools-cache-v1
          restore-keys: depot-tools-

      - name: Setup depot_tools
        run: echo "PATH=$PWD/depot_tools:$PATH" >> $GITHUB_ENV

      # cache /angle folder if no change in dot.gclient_for_macOS
      - name: Cache ANGLE checkout
        uses: actions/cache@v3
        with:
          path: angle
          key: angle-cache-release-x64-${{ hashFiles('dot.gclient_for_macOS') }}
          restore-keys: angle-cache-release-x64-

      # Rename dot.gclient_for_macOS to .gclient file
      - name: Prepare .gclient file
        run: mv dot.gclient_for_macOS .gclient

      - name: Sync ANGLE repository
        run: gclient sync

      - name: Generate Buid Files Release x64
        run: |
          cd angle
          gn --version
          gn gen out/Release/x64 --args="is_component_build=false use_custom_libcxx=false angle_build_tests=false build_with_chromium=false angle_enable_d3d9=false angle_enable_d3d11=false angle_enable_gl=false angle_enable_metal=true angle_enable_vulkan=false angle_enable_cl=false angle_enable_wgpu=false angle_enable_swiftshader=false angle_enable_hlsl=false angle_has_rapidjson=false angle_build_vulkan_system_info=false angle_enable_overlay=false use_glib=false angle_enable_trace=false target_cpu=\"x64\" is_debug=false"

      - name: Build Release x64 dylibs
        run: |
          cd angle
          autoninja -C out/Release/x64 libEGL libGLESv2

      - name: Upload dylibs
        uses: actions/upload-artifact@v4
        with:
          name: lib-release-x64
          path: angle/out/Release/x64/lib*.dylib

  merge-release:
    name: Merge Release arm64 and x64 dylibs
    runs-on: macos-14
    needs: [build-release-arm64, build-release-x64]

    steps:
      - name: Download arm64 dylibs
        uses: actions/download-artifact@v4
        with:
          name: lib-release-arm64
          path: release-arm64

      - name: Download x64 dylibs
        uses: actions/download-artifact@v4
        with:
          name: lib-release-x64
          path: release-x64

      - name: Merge with lipo
        run: |
          lipo -create \
            release-arm64/libGLESv2.dylib \
            release-x64/libGLESv2.dylib \
            -output libGLESv2.dylib

          lipo -create \
            release-arm64/libEGL.dylib \
            release-x64/libEGL.dylib \
            -output libEGL.dylib

      - name: Upload merged universal dylibs
        uses: actions/upload-artifact@v4
        with:
          name: lib-release-universal
          path: |
            libGLESv2.dylib
            libEGL.dylib

